initSidebarItems({"enum":[["Adt","A Data Type"],["AssocItem",""],["BuiltinType",""],["CallableDef",""],["Container",""],["DefWithBody","The defs which have a body."],["DocDef",""],["Either",""],["FieldSource",""],["GenericDef",""],["ModuleDef","The defs which can be visible in the module."],["ModuleSource",""],["Mutability",""],["Namespace",""],["PathKind",""],["ScopeDef","For IDE only"],["Ty","A type."],["TypeCtor","A type constructor or type name: this might be something like the primitive type `bool`, a struct like `Vec`, or things like function pointers or tuples."],["VariantDef",""]],"macro":[["crate_graph",""]],"mod":[["db","FIXME: write short doc here"],["debug","printf debugging infrastructure for rust-analyzer."],["diagnostics","FIXME: write short doc here"],["from_source","FIXME: write short doc here"],["mock","FIXME: write short doc here"],["source_binder","Lookup hir elements using positions in the source code. This is a lossy transformation: in general, a single source might correspond to several modules, functions, etc, due to macros, cfgs and `#[path=]` attributes on modules."]],"struct":[["ApplicationTy","A nominal type with (maybe 0) type parameters. This might be a primitive type like `bool`, a struct, tuple, function pointer, reference or several other things."],["AstIdMap","Maps items' `SyntaxNode`s to `ErasedFileAstId`s and back."],["Const",""],["ConstData",""],["Crate","hir::Crate describes a single crate. It's the main interface with which a crate's dependencies interact. Mostly, it should be just a proxy for the root module."],["CrateDependency",""],["Documentation","Holds documentation"],["Enum",""],["EnumVariant",""],["ErasedFileAstId",""],["ExprScopes",""],["FnData",""],["Function",""],["GenericParam","Data about a generic parameter (to a function, struct, impl, ...)."],["GenericParams","Data about the generic parameters of a function, struct, impl, etc."],["HirFileId","hir makes heavy use of ids: integer (u32) handlers to various things. You can think of id as a pointer (but without a lifetime) or a file descriptor (but for hir objects)."],["ImplBlock",""],["ImportId",""],["MacroCallId","`MacroCallId` identifies a particular macro invocation, like `println!(\"Hello, {}\", world)`."],["MacroCallLoc",""],["MacroDef",""],["MacroDefId",""],["MacroFile",""],["Module",""],["Name","`Name` is a wrapper around string, which is used in hir for both references and declarations. In theory, names should also carry hygiene info, but we are not there yet!"],["Path",""],["PerNs",""],["Source",""],["Static",""],["Struct",""],["StructField",""],["Substs","A list of substitutions for generic parameters."],["Trait",""],["TraitRef","A trait with type parameters. This includes the `Self`, so this represents a concrete type implementing the trait. Name to be bikeshedded: TraitBound? TraitImplements?"],["TypeAlias",""],["Union",""]],"trait":[["Docs",""],["HasBody",""],["HasBodySource",""],["HasGenericParams",""],["HasSource",""],["HirDisplay",""],["TypeWalk","This allows walking structures that contain types to do something with those types, similar to Chalk's `Fold` trait."]]});